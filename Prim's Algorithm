#PRIM'S ALGORITHM TO FIND MINIMUM SPANNING TREE
graph=[
       [0,7,-1,-1,-1,-1,-1,2,-1,-1],
       [7,0,4,1,-1,5,-1,-1,-1,-1],
       [-1,4,0,-1,-1,-1,-1,8,-1,-1], 
       [-1,1,-1,0,6,8,3,3,-1,-1],
       [-1,-1,-1,6,0,-1,-1,6,8,-1],
       [-1,5,-1,8,-1,0,-1,-1,-1,-1],
       [-1,-1,-1,3,-1,-1,0,-1,9,2],
       [2,-1,8,3,6,-1,-1,0,-1,-1],
       [-1,-1,-1,-1,8,-1,9,-1,0,-1],
       [-1,-1,-1,-1,-1,-1,2,-1,-1,0]
       ]
visited=[False]*len(graph)
min=float('inf')
x=y=-1
print(min)
for i in range(len(graph)):
    for j in range(len(graph[i])):
        if graph[i][j]==0 or graph[i][j]==-1:
            continue
        elif  min>graph[i][j]:
                min=graph[i][j]
                x=i
                y=j
print(x+1,y+2,min)
visited[x]=True
visited[y]=False
mst=[]
mst.append(tuple((x+1,y+1,min)))
print(mst)
while False in visited:
    min=float('inf') 
    for i in range(len(visited)):
        
        if visited[i]==True:
            for j in range(len(graph[i])):
                if graph[i][j]==0 or graph[i][j]==-1  or visited[j]==True:
                    continue
                elif  min>graph[i][j]:
                        min=graph[i][j]
                        x=i
                        y=j
    visited[y]=True
    mst.append(tuple((x+1,y+1,min)))

for i in mst:   
   print("the edges of mininmum spanning tree is",i)
#OUTPUT
#inf
#2 5 1
#[(2, 4, 1)]
#the edges of mininmum spanning tree is (2, 4, 1)
#the edges of mininmum spanning tree is (2, 4, 1)
#the edges of mininmum spanning tree is (4, 7, 3)
#the edges of mininmum spanning tree is (7, 10, 2)
#the edges of mininmum spanning tree is (4, 8, 3)
#the edges of mininmum spanning tree is (8, 1, 2)
#the edges of mininmum spanning tree is (2, 3, 4)
#the edges of mininmum spanning tree is (2, 6, 5)
#the edges of mininmum spanning tree is (4, 5, 6)
#the edges of mininmum spanning tree is (5, 9, 8)
